# Routes
# This file defines all application routes (Higher priority routes first).
# They're grouped by controller.

GET    / controllers.WelcomeController.show()

GET    /help controllers.HelpController.show()

GET    /login  controllers.SessionController.new_()
POST   /login  controllers.SessionController.create()
GET    /logout controllers.SessionController.delete()

GET    /api-tokens        controllers.ApiTokenController.index()
POST   /api-tokens        controllers.ApiTokenController.create()
DELETE /api-tokens/:token controllers.ApiTokenController.destroy(token: String)

GET    /confirm/prompt/:email controllers.ConfirmationController.index(email)
GET    /confirm/:token        controllers.ConfirmationController.show(token)

GET    /register controllers.UserController.new_()
POST   /register controllers.UserController.create()

GET    /reset-password        controllers.PasswordController.new_()
POST   /reset-password        controllers.PasswordController.create()
GET    /reset-password/:token controllers.PasswordController.edit(token)
POST   /reset-password/:token controllers.PasswordController.update(token)

DELETE /tour controllers.TourController.delete()

GET    /documents/:id.json controllers.DocumentController.showJson(id: Long)
GET    /documents/:id.txt  controllers.DocumentController.showText(id: Long)
GET    /documents/:id.pdf  controllers.DocumentController.showPdf(id: Long)
GET    /documents/:id      controllers.DocumentController.show(id: Long)

HEAD   /uploads/:uuid        controllers.UploadController.show(uuid: java.util.UUID)
POST   /uploads/:uuid        controllers.UploadController.create(uuid: java.util.UUID)
POST   /uploads/:uuid/finish controllers.UploadController.startClustering(uuid: java.util.UUID)

POST   /files/finish     controllers.MassUploadController.startClustering()
POST   /files/finish/:id controllers.MassUploadController.startClusteringExistingDocumentSet(id: Long)
HEAD   /files/:guid      controllers.MassUploadController.show(guid: java.util.UUID)
POST   /files/:guid      controllers.MassUploadController.create(guid: java.util.UUID)
DELETE /files            controllers.MassUploadController.cancel()

GET    /imports.json controllers.ImportJobController.index()

GET    /imports/csv                          controllers.CsvUploadController.new_()
GET    /imports/file                         controllers.FileImportController.new_()
GET    /imports/file/add-to-document-set/:id controllers.FileImportController.edit(id: Long)
GET    /imports/documentcloud-project        controllers.DocumentCloudProjectController.index()
POST   /imports/documentcloud                controllers.DocumentCloudImportJobController.create()
GET    /imports/documentcloud/new/:query     controllers.DocumentCloudImportJobController.new_(query: String)
POST   /imports/clone/:sourceDocumentSetId   controllers.CloneImportJobController.create(sourceDocumentSetId: Long)

DELETE /trees/jobs/:jobId controllers.ReclusterJobController.delete(jobId: Long)

# Routes that relate to a DocumentSet
GET    /documentsets                      controllers.DocumentSetController.index(page: Int ?= 1)
GET    /documentsets/:id.html.json        controllers.DocumentSetController.showHtmlInJson(id: Long)
GET    /documentsets/:id.json             controllers.DocumentSetController.showJson(id: Long)
GET    /documentsets/:id                  controllers.DocumentSetController.show(id: Long)
# URLs like "/documentsets/123/job-456"
GET    /documentsets/:id/$jsParams<[a-zA-Z]+-[0-9]+> controllers.DocumentSetController.showWithJsParams(id: Long, jsParams: String)
DELETE /documentsets/:id                  controllers.DocumentSetController.delete(id: Long)
PUT    /documentsets/:id                  controllers.DocumentSetController.update(id: Long)

GET    /documentsets/:id/api-tokens        controllers.ApiTokenController.indexForDocumentSet(id: Long)
POST   /documentsets/:id/api-tokens        controllers.ApiTokenController.createForDocumentSet(id: Long)
DELETE /documentsets/:id/api-tokens/:token controllers.ApiTokenController.destroyForDocumentSet(id: Long, token: String)

HEAD   /documentsets/:id/files/$sha1<[0-9a-fA-f]{40}> controllers.DocumentSetFileController.head(id: Long, sha1: Array[Byte])

GET    /documentsets/:id/users        controllers.DocumentSetUserController.index(id: Long)
PUT    /documentsets/:id/users/:email controllers.DocumentSetUserController.update(id: Long, email: String)
DELETE /documentsets/:id/users/:email controllers.DocumentSetUserController.delete(id: Long, email: String)

GET    /documentsets/:id/documents controllers.DocumentListController.index(id: Long)

GET    /documentsets/:id/documents/:documentId/highlights controllers.HighlightController.index(id: Long, documentId: Long, q: String)

GET    /documentsets/:id/export                                              controllers.DocumentSetExportController.index(id: Long)
GET    /documentsets/:id/export/documents-with-string-tags/:format/:filename controllers.DocumentSetExportController.documentsWithStringTags(format: models.export.format.Format, filename: String, id: Long)
GET    /documentsets/:id/export/documents-with-column-tags/:format/:filename controllers.DocumentSetExportController.documentsWithColumnTags(format: models.export.format.Format, filename: String, id: Long)

POST   /documentsets/:id/trees         controllers.TreeController.create(id: Long)
PUT    /documentsets/:id/trees/:treeId controllers.TreeController.update(id: Long, treeId: Long)
DELETE /documentsets/:id/trees/:treeId controllers.TreeController.destroy(id: Long, treeId: Long)

GET    /trees/:treeId/nodes.json         controllers.NodeController.index(treeId: Long)
GET    /trees/:treeId/nodes/:nodeId.json controllers.NodeController.show(treeId: Long, nodeId: Long)

POST   /documentsets/:id/tags               controllers.TagController.create(id: Long)
PUT    /documentsets/:id/tags/:tagId        controllers.TagController.update(id: Long, tagId: Long)
DELETE /documentsets/:id/tags/:tagId        controllers.TagController.destroy(id: Long, tagId: Long)
GET    /documentsets/:id/tags.csv           controllers.TagController.indexCsv(id: Long)
GET    /documentsets/:id/tags               controllers.TagController.indexJson(id: Long)
GET    /documentsets/:id/trees/:treeId/tags controllers.TagController.indexJsonWithTree(id: Long, treeId: Long)

GET    /documentsets/:id/tags/count         controllers.TagDocumentController.count(id: Long)
POST   /documentsets/:id/tags/:tagId/add    controllers.TagDocumentController.createMany(id: Long, tagId: Long)
POST   /documentsets/:id/tags/:tagId/remove controllers.TagDocumentController.destroyMany(id: Long, tagId: Long)

GET    /documentsets/:id/views         controllers.ViewController.indexJson(id: Long)
POST   /documentsets/:id/views         controllers.ViewController.create(id: Long)
PUT    /documentsets/:id/views/:viewId controllers.ViewController.update(id: Long, viewId: Long)
DELETE /documentsets/:id/views/:viewId controllers.ViewController.destroy(id: Long, viewId: Long)

# We POST the "nodes" parameter here because it can be large; but conceptually this is GET.
POST   /documentsets/:id/document-nodes/count-by-node controllers.DocumentNodeController.countByNode(id: Long)

GET    /documentsets/:id/error-list controllers.DocumentProcessingErrorController.index(id: Long)

GET    /public-document-sets controllers.PublicDocumentSetController.index()
GET    /shared-document-sets controllers.SharedDocumentSetController.index()


GET    /documentsets/:id/archive/view/:filename          controllers.DocumentSetArchiveController.archive(id: Long, filename: String)

# Admin section
GET    /admin/users        controllers.admin.UserController.index()
POST   /admin/users        controllers.admin.UserController.create()
GET    /admin/users.json   controllers.admin.UserController.indexJson(page: Int ?= 1)
GET    /admin/users/:email controllers.admin.UserController.show(email: String)
PUT    /admin/users/:email controllers.admin.UserController.update(email: String)
DELETE /admin/users/:email controllers.admin.UserController.delete(email: String)

GET    /admin/imports        controllers.admin.ImportJobController.index()
DELETE /admin/imports/:jobId controllers.admin.ImportJobController.delete(jobId: Long)

GET    /admin/plugins controllers.admin.PluginController.index()

GET    /plugins     controllers.PluginController.index()
POST   /plugins     controllers.PluginController.create()
PUT    /plugins/:id controllers.PluginController.update(id: java.util.UUID)
DELETE /plugins/:id controllers.PluginController.destroy(id: java.util.UUID)

# API V1
#
# Each is documented at https://github.com/overview/overview-server/wiki/API-v1
GET    /api/v1/document-sets/:id/tags      controllers.api.TagController.index(id: Long)

POST   /api/v1/document-sets controllers.api.DocumentSetController.create()

GET    /api/v1/files        controllers.api.MassUploadController.index()
POST   /api/v1/files/finish controllers.api.MassUploadController.startClustering()
HEAD   /api/v1/files/:guid  controllers.api.MassUploadController.show(guid: java.util.UUID)
POST   /api/v1/files/:guid  controllers.api.MassUploadController.create(guid: java.util.UUID)
DELETE /api/v1/files        controllers.api.MassUploadController.cancel()

GET /api/v1/document-sets/:docsetId/documents     controllers.api.DocumentController.index(docsetId: Long, fields: String ?= "")
GET /api/v1/document-sets/:docsetId/documents/:id controllers.api.DocumentController.show(docsetId: Long, id: Long)

GET /api/v1/store/state controllers.api.StoreStateController.show()
PUT /api/v1/store/state controllers.api.StoreStateController.update()

GET    /api/v1/store/objects                 controllers.api.StoreObjectController.index()
POST   /api/v1/store/objects                 controllers.api.StoreObjectController.create()
GET    /api/v1/store/objects/:id             controllers.api.StoreObjectController.show(id: Long)
PUT    /api/v1/store/objects/:id             controllers.api.StoreObjectController.update(id: Long)
DELETE /api/v1/store/objects/:id             controllers.api.StoreObjectController.destroy(id: Long)
DELETE /api/v1/store/objects                 controllers.api.StoreObjectController.destroyMany()

GET    /api/v1/store/document-objects/count-by-object controllers.api.DocumentStoreObjectController.countByObject()
POST   /api/v1/store/document-objects                 controllers.api.DocumentStoreObjectController.createMany()
DELETE /api/v1/store/document-objects                 controllers.api.DocumentStoreObjectController.destroyMany()

# Blog Header

GET /blog-header        controllers.BlogHeaderController.show()

# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file            controllers.Assets.at(path="/public", file)
GET    /$file<robots\.txt>      controllers.Assets.at(path="/public", file)
